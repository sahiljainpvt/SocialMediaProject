import { Component, ElementRef, Input, OnInit, SimpleChanges, ViewChild } from '@angular/core';
import { IPost } from '../../interfaces/post';
import { IUser } from 'src/app/interfaces/user';
import { FormBuilder, FormGroup } from '@angular/forms';
import { PostService } from 'src/app/services/post.service';
import { UserService } from 'src/app/services/user.service';
import { AccountService } from 'src/app/services/account.service';

@Component({
  selector: 'app-post-list',
  templateUrl: './post-list.component.html',
  styleUrls: ['./post-list.component.scss']
})
export class PostListComponent implements OnInit {
  @ViewChild('blankContentModal') blankContentModal!: ElementRef;
  @Input()
  currentUser!: IUser;
  posts: IPost[] = [];
  imageUrl: string = this.postService.imagUrl;
  fileData:any = null;
  profile?:string;
  currentUserId!: string;
  

  constructor(private fb: FormBuilder, private postService: PostService, private userService: UserService, public accountService: AccountService) {}
  ngOnInit(): void {
    this.postService.getAll().subscribe(res => this.posts = res);
    console.log(this.currentUser.id);
    this.currentUserId = this.accountService.getCurrentUserId()
    console.log(this.currentUserId);
    //this.postForm.get("userId")?.setValue(this.currentUserId);
  }
  post: IPost = {
    id: 0,
    content: "",
    dateCreated: new Date,
    userId: '',
    postLikes: [],
    comments: [],
    profile: '',
    image: null
  };
    postForm= this.fb.group({
      content: [''],
      dateCreated: new Date,
      image:null,
      userId: '',
      comments: [],
      postLikes: [],
    });
  
  
    addPost() {
      const contentValue = this.postForm.get('content')?.value;
      if (contentValue && contentValue.trim() !== '') {
        const formData = new FormData();
        formData.append('content', contentValue);
        formData.append('image', this.fileData); // Assuming this.fileData is a File object
        formData.append('userId', this.currentUserId);
    
        const newPost: IPost = {
          id: 0, // This will be generated by the server, I assume
          content: contentValue,
          dateCreated: new Date(), // Or use the correct value for dateCreated
          userId: '',
          profile: '', // Add the correct value for profile
          image: this.fileData,
          comments: [],
          postLikes: [],
        };
    
        this.postService.create(formData).subscribe(
          (res) => {
            this.postService.getAll().subscribe((posts) => (this.posts = posts));
          },
          (error) => {
            console.error('Error creating post:', error);
            // Handle error appropriately
          }
        );
    
        this.postForm.get('content')?.setValue('');
        this.postForm.get('image')?.setValue(null);
      }
      else{
        $(this.blankContentModal.nativeElement).modal('show');
      }
    }
    
  
  handleUpload(event: any) {
    this.fileData = event.target.files[0];
    this.profile = event.target.files[0].name;
  }
  
}
